package ru.darkkeks.telegram.lifestats.handlers

import org.springframework.stereotype.Component
import ru.darkkeks.telegram.core.api.ParseMode
import ru.darkkeks.telegram.core.api.Telegram
import ru.darkkeks.telegram.core.buildKeyboard
import ru.darkkeks.telegram.core.handle_wip.ButtonState
import ru.darkkeks.telegram.core.serialize.pushInt
import ru.darkkeks.telegram.lifestats.ButtonConverter
import ru.darkkeks.telegram.lifestats.Context
import ru.darkkeks.telegram.lifestats.HandlerFactory
import ru.darkkeks.telegram.lifestats.handlerList
import ru.darkkeks.telegram.lifestats.repository.EventClassRepository

@Component
class MainMenu(
    val telegram: Telegram,
    val buttonConverter: ButtonConverter,
    val eventClassRepository: EventClassRepository,
) : HandlerFactory {
    override fun handlers() = handlerList {
        command("help", ::commonHandler)
        command("start", ::commonHandler)

        command("edit", ::editHandler)
        callback<EditButton>(::editHandler)

        command("report", ::reportHandler)
        callback<ReportButton>(::reportHandler)

        callback<EventClassButton> {
            val eventClass = eventClassRepository.findById(it.state.ecid)
            if (eventClass.isPresent) {
                telegram.sendMessage(it.userData.chatId, "–¢—ã —Ç—ã–∫–Ω—É–ª –Ω–∞ –∫–Ω–æ–ø–∫—É `${eventClass.get().name}`",
                    parseMode = ParseMode.MARKDOWN_V2)
            } else {
                telegram.sendMessage(it.userData.chatId, "–¢—ã —Ç—ã–∫–Ω—É–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–æ–º ü§Ø")
            }
        }

        fallback {
            telegram.sendMessage(it.userData.chatId, "–¢—É—Ç –¥–µ—Ñ–æ–ª—Ç")
        }
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
     */
    private fun commonKeyboard() = buildKeyboard {
        add("üìå Report", ReportButton())
        add("üìù Edit", EditButton())
    }

    private fun commonHandler(context: Context) {
        telegram.sendMessage(context.userData.chatId, "–¢—É—Ç /help",
            replyMarkup = buttonConverter.serialize(commonKeyboard()))
    }

    private fun editHandler(context: Context) {
        telegram.sendMessage(context.userData.chatId, "–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à—Ç—É–∫–∏")
    }

    private fun reportHandler(context: Context) {
        val keyboard = buildKeyboard {
            for (eventClass in eventClassRepository.findAll()) {
                add(eventClass.name, EventClassButton(eventClass.ecid))
            }
        }

        telegram.sendMessage(context.userData.chatId, "–í–æ—Ç –∫–Ω–æ–ø–∫–∏",
            replyMarkup = buttonConverter.serialize(keyboard))
    }
}

class EditButton : ButtonState()
class ReportButton : ButtonState()

class EventClassButton(val ecid: Int) : ButtonState({ pushInt(ecid) })
