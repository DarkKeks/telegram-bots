package ru.darkkeks.telegram.trackyoursheet

import org.springframework.context.annotation.Lazy
import org.springframework.stereotype.Component
import ru.darkkeks.telegram.core.api.TelegramApi
import ru.darkkeks.telegram.core.buildKeyboard
import ru.darkkeks.telegram.core.handle.*


inline fun <reified M : MessageState, reified B : ButtonState> callbackHandler(
        crossinline block: CallbackContext<TrackUserState, M, B>.() -> Unit
): CallbackHandler = abstractCallbackHandler(block)


enum class TrackGlobalState {
    NONE,
    NEW_RANGE
}

data class TrackUserState(
        val userId: Int,
        val chatId: Long,
        val state: TrackGlobalState = TrackGlobalState.NONE
) : UserState()


class GoBackButton : TextButton("‚óÄ –ù–∞–∑–∞–¥")

class CreateNewRangeButton : TextButton("*Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Ä–µ–Ω–∂")
class ListRangesButton : TextButton("üìù –°–ø–∏—Å–æ–∫ —Ä–µ–Ω–∂–µ–π")

class MainMenuMessageState : MessageState()
class RangeListMessageState : MessageState()

interface HandlerFactory {
    val priority get() = 0

    fun handlers(): List<Handler>
}

@Component
class MainMenu(
        private val telegramApi: TelegramApi,
        private val userStateService: TrackUserStateService,
        private val statefulMessagesService: StatefulMessagesService,

        private val rangeList: RangeList
) : HandlerFactory {

    fun render() = StatefulMessageRender(
            MainMenuMessageState(),
            """
                üî• –ü—Ä–∏–≤–µ—Ç, —è —É–º–µ—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—á–∫–∞–º–∏. üî•
                
                üìå _–†–µ–Ω–∂–µ–º_ —è –Ω–∞–∑—ã–≤–∞—é –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º –ª–∏—Å—Ç–µ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ.
                
                ‚ú® –° –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å @darkkeks.
            """.trimIndent(),
            buildKeyboard {
                add(CreateNewRangeButton())
                add(ListRangesButton())
            }
    )

    override fun handlers(): List<Handler> {
        return buildList {
            callbackHandler<MainMenuMessageState, CreateNewRangeButton> {
                telegramApi.answerCallbackQuery(callbackQuery.id)
                userStateService.persist(userState.copy(state = TrackGlobalState.NEW_RANGE))
            }
            callbackHandler<MainMenuMessageState, ListRangesButton> {
                telegramApi.answerCallbackQuery(callbackQuery.id)

                val render = rangeList.render(userState)
                statefulMessagesService.editStatefulMessage(userState.chatId, message.messageId, render)
            }
        }
    }
}



@Component
class RangeList(
        @Lazy private val mainMenu: MainMenu
) : HandlerFactory {

    fun render(userState: TrackUserState): StatefulMessageRender {

    }

    override fun handlers(): List<Handler> {
        return buildList {

        }
    }
}

