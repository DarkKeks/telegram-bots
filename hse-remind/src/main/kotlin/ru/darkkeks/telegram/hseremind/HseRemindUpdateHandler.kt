package ru.darkkeks.telegram.hseremind

import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import org.springframework.stereotype.Component
import ru.darkkeks.telegram.core.api.*
import ru.darkkeks.telegram.core.createLogger

@Component
class HseRemindUpdateHandler(
        val telegram: Telegram,
        val telegramFiles: TelegramFiles,
        val userRepository: UserRepository,
        val userConfigService: UserConfigService
) : UpdateHandler {

    private val logger = createLogger<HseRemindUpdateHandler>()

    override fun handle(update: Update) {
        when {
            update.message != null -> {
                val message = update.message!!

                if (message.chat.type != ChatType.PRIVATE) {
                    return
                }

                val document = message.document
                if (document != null) {
                    try {
                        importDocument(message.chat.id, document)
                    } catch (e: Exception) {
                        logger.error("Document import failed", e)
                        telegram.sendMessage(message.chat.id, """
                            –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–∏–∫. üòï –ù–∞–ø–∏—à–∏ @darkkeks
                            $e
                        """.trimIndent()).executeChecked()
                    }
                    return
                }

                val text = message.text
                if (text == null) {
                    cantProcess(message.chat.id)
                    return
                }

                if (text.startsWith("/")) {
                    val command = text.drop(1).split(" ")
                    when (command.firstOrNull()) {
                        "start", "help" -> help(message.chat.id)
                        "import" -> {
                            import(message)
                        }
                        "export" -> {
                            val format = command.getOrNull(1) ?: "yaml"
                            export(message.chat.id, format)
                        }
                        else -> cantProcess(message.chat.id)
                    }
                    return
                }

                cantProcess(message.chat.id)
            }
        }
    }

    private fun import(message: Message) {
        telegram.sendMessage(message.chat.id, """
            –°–∫–∏–Ω—å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∏–∫–æ–º. –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ <a href="$exampleConfig">—Ç—É—Ç</a>.
        """.trimIndent(), parseMode = ParseMode.HTML, disableWebPagePreview = true).executeChecked()
    }

    private fun importDocument(chatId: Long, document: Document) {
        val fileId = document.fileId
        val file = telegram.getFile(fileId).executeChecked()

        val size = file.fileSize
        if (size == null) {
            logger.warn("No file size: {}", file)
            return
        }

        if (size > 1 shl 20) { // 1mb
            val kb = size / (1 shl 10)
            telegram.sendMessage(chatId, """
                    –ö–∞–∫–æ–π-—Ç–æ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª–∏–∫ (`${kb}kb > 1mb`) ü§î
                    –≠—Ç–æ —Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–∏–≥?
                """.trimIndent(), parseMode = ParseMode.MARKDOWN_V2).executeChecked()
            return
        }

        val path = file.filePath
        if (path == null) {
            telegram.sendMessage(chatId, """
                    –ü–æ—á–µ–º—É-—Ç–æ —É —Ñ–∞–π–ª–∞ –Ω–µ—Ç—É `file_path`. –ù–∞–ø–∏—à–∏ @darkkeks, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.
                """.trimIndent(), parseMode = ParseMode.MARKDOWN_V2).executeChecked()
            return
        }

        val response = telegramFiles.downloadFile(path).execute()

        val body = response.body()
        if (response.isSuccessful && body != null) {
            validateConfig(chatId, body.string())
        } else {
            throw TelegramClientException("Failed to download file: ${response.message()}")
        }
    }

    private fun validateConfig(chatId: Long, content: String) {
        val config = try {
            readMapper.readValue(content, UserSpec::class.java)
        } catch (e: Exception) {
            telegram.sendMessage(chatId, """
                –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.
                –í–æ–∑–º–æ–∂–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç –æ—à–∏–±–∫–∞: $e
            """.trimIndent()).executeChecked()
            return
        }

        userConfigService.updateUserConfig(chatId, config)

        telegram.sendMessage(chatId, """
            –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥! üëç
        """.trimIndent()).executeChecked()
    }

    private fun export(chatId: Long, format: String?) {
        val (mapper, mimeType) = when (format) {
            "json" -> jsonWriteMapper to "application/json"
            "yaml", "yml" -> readMapper to "application/x-yaml"
            else -> null to null
        }

        if (mapper == null || mimeType == null) {
            telegram.sendMessage(chatId, """–Ø –Ω–µ —É–º–µ—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç `$format` üòü""",
                    parseMode = ParseMode.MARKDOWN_V2).executeTelegram()
            return
        }

        val userOptional = userRepository.findById(chatId)
        if (userOptional.isEmpty) {
            telegram.sendMessage(chatId, """
                –ü–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç—É –∫–æ–Ω—Ñ–∏–≥–∞.
                –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø–æ –ø—Ä–∏–º–µ—Ä—É <a href="$exampleConfig">–æ—Ç—Å—é–¥–∞</a>, –∞ –ø–æ—Ç–æ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é <b>/import</>. üòâ
            """.trimIndent(), parseMode = ParseMode.HTML, disableWebPagePreview = true).executeTelegram()
            return
        }

        val user = userOptional.get()
        val spec = safeParseSpec(user.spec)

        val content = try {
            mapper.writeValueAsString(spec)
        } catch (e: Exception) {
            logger.error("Cant serialize config for user {}", chatId, e)
            telegram.sendMessage(chatId, """
                –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥. ü§Ø
                –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ @darkkeks. –¢–≤–æ–π —Ä–µ–ø–æ—Ä—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É —Å—Ä–∞–∑—É, –∞ –Ω–µ —á–µ—Ä–µ–∑ inf –¥–Ω–µ–π.
            """.trimIndent(), parseMode = ParseMode.MARKDOWN_V2).executeTelegram()
            return
        }

        try {
            val document = MultipartBody.Part.createFormData("document", "config.$format",
                    RequestBody.create(MediaType.parse(mimeType), content))
            telegram.sendDocument(document, chatId, caption = """
                –î–µ—Ä–∂–∏!
            """.trimIndent()).executeChecked()
        } catch (e: Exception) {
            logger.error("Cant send exported config for user {}, config:" , chatId, content, e)
            telegram.sendMessage(chatId, """
                –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥–æ–º. ü§Ø
                –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ @darkkeks. –¢–≤–æ–π —Ä–µ–ø–æ—Ä—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É —Å—Ä–∞–∑—É, –∞ –Ω–µ —á–µ—Ä–µ–∑ inf –¥–Ω–µ–π.
            """.trimIndent(), parseMode = ParseMode.MARKDOWN_V2).executeTelegram()
        }
    }

    private val exampleConfig = "https://github.com/DarkKeks/telegram-bots/blob/master/hse-remind/src/main/resources/example_config.yml"

    fun help(chatId: Long) {
        telegram.sendMessage(chatId, """
            –ü—Ä–∏–≤–µ—Ç!
            
            –Ø —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞—Ö, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è. –ü–æ–∫–∞-—á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ json/yaml. –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –µ—Å—Ç—å <a href="$exampleConfig">—Ç—É—Ç</a>.
            
            –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ –≤ –±–æ—Ç–µ, –ø–∏–Ω–∞–π—Ç–µ @darkkeks.

            –ö–æ–º–∞–Ω–¥—ã:
            <b>/export</b> [json/yaml] ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥. –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî yaml.
            <b>/import</b> ‚Äî –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥. –§–æ—Ä–º–∞—Ç –≤—Å–µ–≥–¥–∞ yaml, —Ç–∞–∫ –∫–∞–∫ json ‚Äî —ç—Ç–æ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ yaml.
            <b>/start</b>, <b>/help</b> ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """.trimIndent(), parseMode = ParseMode.HTML, disableWebPagePreview = true).executeChecked()
    }

    fun cantProcess(chatId: Long) {
        telegram.sendMessage(chatId, """–ù–µ –ø–æ–Ω–∏–º–∞—é üòß""").executeChecked()
    }
}
